class Solution {
public:
// recursion + memoization-----------------------------------------------
int solve(int i,int j1,int j2,int r,int c,vector<vector<int>>& grid, vector<vector<vector<int>>> &dp){
    // bound case 
    if(j1<0 || j1>=c || j2<0 || j2>=c){
        return -1e8;
    }
    // base case
    if(i==r-1){
        if(j1==j2){
            return grid[i][j1];
        }
        else{
            return grid[i][j1] +grid[i][j2];
        }
    }
    // memoization vector use
    if(dp[i][j1][j2] != -1){
        return dp[i][j1][j2];
    }
    int maxi = -1e8;
    // recursive call k & l(robot 1 & robot 2) have three option at any stage 
    for(int k = -1;k<=+1;k++){
        for(int l = -1;l<=+1;l++){
            int value = 0;
            if(j1==j2){
              value = grid[i][j1];
            }
            else{
                value =grid[i][j1] +grid[i][j2];
            }
            value += solve(i+1,j1+k,j2+l,r,c,grid,dp);
          maxi = max(maxi,value);
        }
    }
    //  return 
    return dp[i][j1][j2]=maxi;
}
// tabulation----------------------------------------------------------
int solve2(int r,int c,vector<vector<int>>& grid){
    // tabulation vector
     vector<vector<vector<int>>> dp(r,vector<vector<int>>(c,  vector<int>(c,0)));
     // base case 
     for(int k=0;k<c;k++){
         for(int l=0;l<c;l++){
             if(k==l){
                 dp[r-1][k][l] = grid[r-1][k];
             }
             else{
                 dp[r-1][k][l] = grid[r-1][k] +grid[r-1][l];
             }
         }
     }
     // same number of loops to varible 
     for(int i = r-2;i>=0;i--){
         for(int j1 =0;j1<c;j1++){
             for(int j2 = 0;j2<c;j2++){
                 // same recurive call code
                         int maxi = -1e8;
                   for(int k = -1;k<=+1;k++){
                         for(int l = -1;l<=+1;l++){
                               int value = 0;
                               if(j1==j2){
                                  value = grid[i][j1];
                                       }
                               else{
                                  value =grid[i][j1] +grid[i][j2];
                                        }
                                        // bound case 
                   if(j1+k >=0 && j1+k < c && j2+l >=0 && j2+l<c)                                        
                    value += dp[i+1][j1+k][j2+l];
                    else 
                    value += -1e8;
                   maxi = max(maxi,value);
                 }
             }
             dp[i][j1][j2] = maxi;
         }
        }
     }
     return dp[0][0][c-1];
}
// space optimization-------------------------------------------------------------------------------
int solve3(int r,int c,vector<vector<int>>& grid){
    // space optimization vector vector
     vector<vector<int>> front(c,vector<int>(c,0));
      vector<vector<int>> curr(c,vector<int>(c,0));

     // base case 
     for(int k=0;k<c;k++){
         for(int l=0;l<c;l++){
             if(k==l){
                 front[k][l] = grid[r-1][k];
             }
             else{
                 front[k][l] = grid[r-1][k] +grid[r-1][l];
             }
         }
     }
     // same number of loops to varible 
     for(int i = r-2;i>=0;i--){
         for(int j1 =0;j1<c;j1++){
             for(int j2 = 0;j2<c;j2++){
                 // same recurive call code
                         int maxi = -1e8;
                   for(int k = -1;k<=+1;k++){
                         for(int l = -1;l<=+1;l++){
                               int value = 0;
                               if(j1==j2){
                                  value = grid[i][j1];
                                       }
                               else{
                                  value =grid[i][j1] +grid[i][j2];
                                        }
                                        // bound case 
                   if(j1+k >=0 && j1+k < c && j2+l >=0 && j2+l<c)                                        
                    value += front[j1+k][j2+l];
                    else 
                    value += -1e8;
                   maxi = max(maxi,value);
                 }
             }
             curr[j1][j2] = maxi;
         }
        }
        // here some change
        front = curr;
     }
     return front[0][c-1];
}
//Question---------------------------------------------------------------
    int cherryPickup(vector<vector<int>>& grid) {
       // num of row in grid
        int r = grid.size();
        // num of columns in grid 
        int c = grid[0].size();
        //dp vector 
         vector<vector<vector<int>>> dp(r,vector<vector<int>>(c,  vector<int>(c,-1)));
         // memoization call-------------------------------------------------- 
        // int ans = solve(0,0,c-1,r,c,grid,dp);

        // tabulation call---------------------------------------------------
        // int ans = solve2(r,c,grid);

        //space optimization call-------------------------------------------
        int ans = solve3(r,c,grid);
        return ans;
    }
};
