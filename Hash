Hclass MyHashMap {
public:
    struct ListNode {
        int val, key;
        ListNode *next;
        ListNode(int a, int b): key(a), val(b), next(NULL) {}
    };
    ListNode* bucket[10007];
    /** Initialize your data structure here. */
    MyHashMap() {
        for(int i = 0; i < 10007; ++ i)
            bucket[i] = NULL;
    }
    
    /** value will always be non-negative. */
    void put(int key, int value) {
        int idx = key % 10007;
        ListNode *curr = bucket[idx];
        while(curr != NULL){
            if(curr->key == key){
                curr->val = value;
                return;
            }
            curr = curr->next;
        }
        ListNode *new_head = new ListNode(key, value);
        new_head->next = bucket[idx];
        bucket[idx] = new_head;
    }
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    int get(int key) {
        int idx = key % 10007;
        ListNode *curr = bucket[idx];
        while(curr != NULL){
            if(curr->key == key)
                return curr->val;
            curr = curr->next;
        }
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    void remove(int key) {
        int idx = key % 10007;
        ListNode *curr = bucket[idx];
        if(curr == NULL)
            return;
        if(curr != NULL && curr->key == key){
            bucket[idx] = curr->next;
            delete curr;
            return;
        }
        ListNode *tmp;
        while(curr->next != NULL){
            if(curr->next->key == key){
                tmp = curr->next;
                curr->next = tmp->next;
                delete tmp;
                return;
            }
            curr = curr->next;
        }
    }
};
