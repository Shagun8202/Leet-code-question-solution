class Solution {
public:
int solve(int i,int j,string &text1, string &text2, vector<vector<int> > &dp){
  if(i==0 || j==0){
      return 0;
  }
  if(dp[i][j] != -1){
      return dp[i][j];
  }
  if(text1[i-1] == text2[j-1]){
      return dp[i][j]=1+solve(i-1,j-1,text1,text2,dp);
  }
  return dp[i][j]=max( solve(i-1,j,text1,text2,dp),solve(i,j-1,text1,text2,dp));



}
int solve2(int n,int m,string &text1, string &text2){
 vector<vector<int> > dp(n+1,vector<int>(m+1,-1));
 for(int i =0;i<=m;i++) dp[0][i] = 0;
 for(int j=0;j<=n;j++) dp[j][0] = 0;
 for(int i=1;i<=n;i++){
     for(int j = 1;j<=m;j++){

         if(text1[i-1] == text2[j-1]){
              dp[i][j]=1+dp[i-1][j-1];
                    }
       else  dp[i][j]=max( dp[i-1][j],dp[i][j-1]);
     }
 }


  return dp[n][m];


}
    int longestPalindromeSubseq(string s) {
        int n = s.size();
        int m = s.size();
        string t = s;
        reverse(t.begin(),t.end());
        return solve2(n,m,s,t);
    }
};
