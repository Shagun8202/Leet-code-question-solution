/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
    private:
    void insert(Node* &head,Node* &tail,int d){
     if(head == NULL){
         Node* new1 = new Node(d);
         head =new1;
         tail=new1;
         return ;
     }else{
         Node* new2 = new Node(d);
         tail->next = new2;
         tail = new2;
     }
    }
public:
    Node* copyRandomList(Node* head) {
       Node* clonehead  =NULL;
       Node* clonetail = NULL;
       Node* temp = head;
       while(temp != NULL){
           insert(clonehead,clonetail,temp->val);
           temp = temp->next;
       } 
       unordered_map<Node*,Node*> mp;
     Node*  orgi = head;
      Node* cloni = clonehead;
       while(orgi != NULL){
           mp[orgi]=cloni;
           orgi = orgi->next;
           cloni= cloni->next;
       }
       orgi = head;
       cloni =clonehead;
       while(orgi != NULL){
       cloni->random=mp[orgi->random];  
       cloni = cloni->next;
       orgi = orgi->next;  
       }
       return clonehead;
    }
};
